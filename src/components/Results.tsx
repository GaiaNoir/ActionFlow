'use client';

import { useState, useEffect } from 'react';
import { ProcessingResult } from '@/types/api';
import Toast from './Toast';

interface ResultsProps {
  data: ProcessingResult['data'];
  onProcessAnother: () => void;
}

export default function Results({ data, onProcessAnother }: ResultsProps) {
  const [toast, setToast] = useState<{message: string; type: 'success' | 'error' | 'info' | 'warning'; isVisible: boolean}>({
    message: '',
    type: 'success',
    isVisible: false
  });
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    // Animate results appearing
    const timer = setTimeout(() => setIsVisible(true), 100);
    return () => clearTimeout(timer);
  }, []);

  if (!data) return null;

  const showToast = (message: string, type: 'success' | 'error' | 'info' | 'warning' = 'success') => {
    setToast({ message, type, isVisible: true });
  };

  const copyAllResults = async () => {
    const currentDate = new Date().toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
    
    const content = `MEETING SUMMARY & ACTION ITEMS
Generated on ${currentDate}

═══════════════════════════════════════════════════════════════

📋 EXECUTIVE SUMMARY
${data.summary}

✅ ACTION ITEMS
${data.actionItems.length > 0 
  ? data.actionItems.map((item, index) => `${index + 1}. ${item}`).join('\n')
  : 'No action items identified.'
}

🎯 DECISIONS MADE
${data.decisions.length > 0 
  ? data.decisions.map((item, index) => `${index + 1}. ${item}`).join('\n')
  : 'No decisions recorded.'
}

🔄 FOLLOW-UP OPPORTUNITIES
${data.followUps.length > 0 
  ? data.followUps.map((item, index) => `${index + 1}. ${item}`).join('\n')
  : 'No follow-ups identified.'
}

➡️ NEXT STEPS
${data.nextSteps.length > 0 
  ? data.nextSteps.map((item, index) => `${index + 1}. ${item}`).join('\n')
  : 'No next steps defined.'
}

═══════════════════════════════════════════════════════════════
Generated by Meeting Action Items - Professional Meeting Analysis Tool`;

    try {
      await navigator.clipboard.writeText(content);
      showToast('Professional summary copied to clipboard!');
    } catch {
      showToast('Failed to copy results', 'error');
    }
  };

  const copyAsEmail = async () => {
    const currentDate = new Date().toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
    
    const content = `Subject: Meeting Follow-up - ${currentDate}

Hi [Name],

Thank you for the productive meeting. Here's a summary of our discussion and next steps:

**MEETING SUMMARY**
${data.summary}

**ACTION ITEMS**
${data.actionItems.length > 0 
  ? data.actionItems.map((item, index) => `${index + 1}. ${item}`).join('\n')
  : 'No action items identified.'
}

**DECISIONS MADE**
${data.decisions.length > 0 
  ? data.decisions.map((item, index) => `${index + 1}. ${item}`).join('\n')
  : 'No decisions recorded.'
}

**FOLLOW-UP OPPORTUNITIES**
${data.followUps.length > 0 
  ? data.followUps.map((item, index) => `${index + 1}. ${item}`).join('\n')
  : 'No follow-ups identified.'
}

**NEXT STEPS**
${data.nextSteps.length > 0 
  ? data.nextSteps.map((item, index) => `${index + 1}. ${item}`).join('\n')
  : 'No next steps defined.'
}

Please let me know if I missed anything or if you have questions.

Best regards,
[Your name]`;

    try {
      await navigator.clipboard.writeText(content);
      showToast('Email template copied to clipboard!');
    } catch {
      showToast('Failed to copy email template', 'error');
    }
  };

  return (
    <div className={`space-y-6 transition-all duration-500 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'}`}>
      {/* Toast Notification */}
      <Toast 
        message={toast.message}
        type={toast.type}
        isVisible={toast.isVisible}
        onCloseAction={() => setToast(prev => ({ ...prev, isVisible: false }))}
      />

      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
            <svg className="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
          </div>
          <span className="text-green-700 font-medium">Processing Complete</span>
        </div>
      </div>

      {/* Results Toolbar */}
      <div className="flex flex-wrap gap-3 p-4 bg-slate-50 rounded-lg border border-slate-200">
        <button
          onClick={copyAllResults}
          className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
          </svg>
          <span>Copy All Results</span>
        </button>
        
        <button
          onClick={copyAsEmail}
          className="flex items-center space-x-2 px-4 py-2 bg-slate-600 text-white rounded-lg hover:bg-slate-700 transition-colors"
        >
          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
          </svg>
          <span>Copy as Email</span>
        </button>
        
        <button
          onClick={onProcessAnother}
          className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
        >
          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
          </svg>
          <span>Process Another Meeting</span>
        </button>
      </div>

      {/* Meeting Summary */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
        <div className="flex items-center space-x-3 mb-4">
          <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
            <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
          </div>
          <h3 className="text-lg font-semibold text-blue-900">Meeting Summary</h3>
        </div>
        <p className="text-blue-800 leading-relaxed">{data.summary}</p>
      </div>

      {/* Action Items */}
      {data.actionItems.length > 0 && (
        <div className="bg-slate-50 border border-slate-200 rounded-lg p-6">
          <div className="flex items-center space-x-3 mb-4">
            <div className="w-8 h-8 bg-slate-100 rounded-lg flex items-center justify-center">
              <svg className="w-5 h-5 text-slate-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4" />
              </svg>
            </div>
            <h3 className="text-lg font-semibold text-slate-900">Action Items</h3>
          </div>
          <ol className="space-y-3">
            {data.actionItems.map((item, index) => (
              <li key={index} className="flex items-start space-x-3">
                <div className="flex items-center justify-center w-6 h-6 bg-slate-200 text-slate-700 text-sm font-medium rounded-full flex-shrink-0 mt-0.5">
                  {index + 1}
                </div>
                <div className="flex items-start space-x-2 flex-1">
                  <input
                    type="checkbox"
                    className="mt-1 w-4 h-4 text-blue-600 border-slate-300 rounded focus:ring-blue-500"
                    readOnly
                  />
                  <span className="text-slate-700 leading-relaxed">{item}</span>
                </div>
              </li>
            ))}
          </ol>
        </div>
      )}

      {/* Decisions */}
      {data.decisions.length > 0 && (
        <div className="bg-green-50 border border-green-200 rounded-lg p-6">
          <div className="flex items-center space-x-3 mb-4">
            <div className="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
              <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
            </div>
            <h3 className="text-lg font-semibold text-green-900">Decisions Made</h3>
          </div>
          <ul className="space-y-2">
            {data.decisions.map((decision, index) => (
              <li key={index} className="flex items-start space-x-3">
                <div className="w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0"></div>
                <span className="text-green-800 leading-relaxed">{decision}</span>
              </li>
            ))}
          </ul>
        </div>
      )}

      {/* Follow-up Opportunities */}
      {data.followUps.length > 0 && (
        <div className="bg-orange-50 border border-orange-200 rounded-lg p-6">
          <div className="flex items-center space-x-3 mb-4">
            <div className="w-8 h-8 bg-orange-100 rounded-lg flex items-center justify-center">
              <svg className="w-5 h-5 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
              </svg>
            </div>
            <h3 className="text-lg font-semibold text-orange-900">Follow-up Opportunities</h3>
          </div>
          <ul className="space-y-2">
            {data.followUps.map((followUp, index) => (
              <li key={index} className="flex items-start space-x-3">
                <div className="w-2 h-2 bg-orange-500 rounded-full mt-2 flex-shrink-0"></div>
                <span className="text-orange-800 leading-relaxed">{followUp}</span>
              </li>
            ))}
          </ul>
        </div>
      )}

      {/* Next Steps */}
      {data.nextSteps.length > 0 && (
        <div className="bg-purple-50 border border-purple-200 rounded-lg p-6">
          <div className="flex items-center space-x-3 mb-4">
            <div className="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center">
              <svg className="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 9l3 3m0 0l-3 3m3-3H8m13 0a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <h3 className="text-lg font-semibold text-purple-900">Next Steps</h3>
          </div>
          <ul className="space-y-2">
            {data.nextSteps.map((step, index) => (
              <li key={index} className="flex items-start space-x-3">
                <div className="w-2 h-2 bg-purple-500 rounded-full mt-2 flex-shrink-0"></div>
                <span className="text-purple-800 leading-relaxed">{step}</span>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}
